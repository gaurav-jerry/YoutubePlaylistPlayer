{"ast":null,"code":"var _jsxFileName = \"/Users/gauravsharma/work/YoutubePlaylistPlayer/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from 'react';\nimport axios from 'axios';\nimport YouTube from 'react-youtube';\nimport './App.css';\nimport { FaGooglePlay } from 'react-icons/fa';\nimport { BsShuffle } from 'react-icons/bs';\nimport Header from './Header'; //import playIcon from './images/'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [songs, setsongs] = useState([]);\n  const [currentPlaying, setcurrentPlaying] = useState(null);\n  const myRef = useRef(null);\n  useEffect(() => {\n    axios({\n      url: 'https://www.googleapis.com/youtube/v3/playlistItems?part=snippet%2CcontentDetails&maxResults=200&playlistId=PLcjXjwgJpOzZoOYXz8y3I2PE_HspGkUry&key=AIzaSyA43Saqt5kUkQwm-BV_tWWwgA8HP5bwbXE',\n      method: 'get'\n    }).then(response => {\n      setsongs(response.data.items); //  c\n    }); // to do play song after on e finish\n  }, []);\n  const opts = {\n    height: '500',\n    width: '100%',\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1\n    }\n  };\n\n  const onPlayBtnClick = item => {\n    document.body.scrollTop = 0; // For Safari\n\n    document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera\n\n    setcurrentPlaying(item);\n  };\n\n  console.log(songs);\n\n  const onShuffleClick = () => {\n    const randomIndex = Math.floor(Math.random() * songs.length);\n    setcurrentPlaying(songs[randomIndex]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'app-wrapper',\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shuffle-btn\",\n      onClick: onShuffleClick,\n      children: /*#__PURE__*/_jsxDEV(BsShuffle, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 64\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: myRef,\n      children: currentPlaying && /*#__PURE__*/_jsxDEV(YouTube, {\n        videoId: currentPlaying.contentDetails.videoId,\n        opts: opts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 24\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'list-container',\n      children: songs.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: item.snippet.thumbnails.default && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: 'List-Item',\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            alt: \"video-thumbnail\",\n            src: item.snippet.thumbnails.default.url\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: 'list-title',\n            children: item.snippet.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: 'list-item-action-btn',\n            onClick: () => onPlayBtnClick(item),\n            children: /*#__PURE__*/_jsxDEV(FaGooglePlay, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 93\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }, this)\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 26\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"nYzEbfOsYo8vwZ9Dby7ljS1/vIA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/gauravsharma/work/YoutubePlaylistPlayer/src/App.js"],"names":["useEffect","useState","useRef","axios","YouTube","FaGooglePlay","BsShuffle","Header","App","songs","setsongs","currentPlaying","setcurrentPlaying","myRef","url","method","then","response","data","items","opts","height","width","playerVars","autoplay","onPlayBtnClick","item","document","body","scrollTop","documentElement","console","log","onShuffleClick","randomIndex","Math","floor","random","length","contentDetails","videoId","map","snippet","thumbnails","default","title","id"],"mappings":"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","sourcesContent":["\nimport {useEffect, useState, useRef} from 'react'\nimport axios from 'axios';\nimport YouTube from 'react-youtube';\nimport './App.css';\nimport { FaGooglePlay } from 'react-icons/fa';\nimport { BsShuffle } from 'react-icons/bs';\nimport Header from './Header';\n//import playIcon from './images/'\n\nfunction App() {\n  const [songs, setsongs] = useState([]);\n  const [currentPlaying, setcurrentPlaying] = useState(null);\n  const myRef = useRef(null);\n\n  useEffect(() => {\n     axios({\n      url: 'https://www.googleapis.com/youtube/v3/playlistItems?part=snippet%2CcontentDetails&maxResults=200&playlistId=PLcjXjwgJpOzZoOYXz8y3I2PE_HspGkUry&key=AIzaSyA43Saqt5kUkQwm-BV_tWWwgA8HP5bwbXE',\n      method: 'get'\n    }).then(response => {\n      setsongs(response.data.items);\n    //  c\n    });\n    // to do play song after on e finish\n  }, []);\n\n\n  const opts = {\n    height: '500',\n    width: '100%',\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1,\n    },\n  };\n  const onPlayBtnClick = (item) => {\n    document.body.scrollTop = 0; // For Safari\n  document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera\n    setcurrentPlaying(item);\n  }\n\n  console.log(songs);\n\n  const onShuffleClick = () => {\n    const randomIndex = Math.floor((Math.random() * songs.length));\n    setcurrentPlaying(songs[randomIndex]);\n  }\n\n  return (\n    <div className = {'app-wrapper'}> \n    {/* <Header /> */}\n    <div className = 'shuffle-btn' onClick = {onShuffleClick} ><BsShuffle /></div>\n    <div ref={myRef} >\n    {currentPlaying && <YouTube videoId={currentPlaying.contentDetails.videoId} opts={opts} />}\n    </div>\n\n    <div className = {'list-container'}>\n      {songs.map(item => <div key  = {item.id}>{\n        item.snippet.thumbnails.default && \n        <div className = {'List-Item'}>\n          <img alt = 'video-thumbnail'  src = {item.snippet.thumbnails.default.url} />\n          <div className = {'list-title'}>{item.snippet.title}</div>\n          <div className = {'list-item-action-btn'}  onClick = {() => onPlayBtnClick(item)}><FaGooglePlay/></div>\n        </div>\n        }</div>)}\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}