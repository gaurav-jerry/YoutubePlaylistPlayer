{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar proxyAgent = require('proxy-agent');\n\nvar debug = require('debug')('superagent-proxy');\n/**\n * Module exports.\n */\n\n\nmodule.exports = setup;\n/**\n * Adds a `.proxy(uri)` function to the \"superagent\" module's Request class.\n *\n * ``` js\n * var request = require('superagent');\n * require('superagent-proxy')(request);\n *\n * request\n *   .get(uri)\n *   .proxy(uri)\n *   .end(fn);\n * ```\n *\n * Or, you can pass in a `superagent.Request` instance, and it's like calling the\n * `.proxy(uri)` function on it, but without extending the prototype:\n *\n * ``` js\n * var request = require('superagent');\n * var proxy = require('superagent-proxy');\n *\n * proxy(request.get(uri), uri).end(fn);\n * ```\n *\n * @param {Object} superagent The `superagent` exports object\n * @api public\n */\n\nfunction setup(superagent, uri) {\n  var Request = superagent.Request;\n\n  if (Request) {\n    // the superagent exports object - extent Request with \"proxy\"\n    Request.prototype.proxy = proxy;\n    return superagent;\n  } else {\n    // assume it's a `superagent.Request` instance\n    return proxy.call(superagent, uri);\n  }\n}\n/**\n * Sets the proxy server to use for this HTTP(s) request.\n *\n * @param {String} uri proxy url\n * @api public\n */\n\n\nfunction proxy(uri) {\n  debug('Request#proxy(%o)', uri); // we need to observe the `url` field from now on... Superagent sometimes\n  // re-uses the `req` instance but changes its `url` field (i.e. in the case of\n  // a redirect), so when that happens we need to potentially re-set the proxy\n  // agent\n\n  setupUrl(this); // attempt to get a proxying `http.Agent` instance\n\n  var agent = proxyAgent(uri); // if we have an `http.Agent` instance then call the .agent() function\n\n  if (agent) this.agent(agent); // store the proxy URI in case of changes to the `url` prop in the future\n\n  this._proxyUri = uri;\n  return this;\n}\n/**\n * Sets up a get/set descriptor for the `url` property of the provided `req`\n * Request instance. This is so that we can re-run the \"proxy agent\" logic when\n * the `url` field is changed, i.e. during a 302 Redirect scenario.\n *\n * @api private\n */\n\n\nfunction setupUrl(req) {\n  var desc = Object.getOwnPropertyDescriptor(req, 'url');\n  if (desc.get == getUrl && desc.set == setUrl) return; // already patched\n  // save current value\n\n  req._url = req.url;\n  desc.get = getUrl;\n  desc.set = setUrl;\n  delete desc.value;\n  delete desc.writable;\n  Object.defineProperty(req, 'url', desc);\n  debug('patched superagent Request \"url\" property for changes');\n}\n/**\n * `url` property getter.\n *\n * @api protected\n */\n\n\nfunction getUrl() {\n  return this._url;\n}\n/**\n * `url` property setter.\n *\n * @api protected\n */\n\n\nfunction setUrl(v) {\n  debug('set `.url`: %o', v);\n  this._url = v;\n  proxy.call(this, this._proxyUri);\n}","map":{"version":3,"sources":["/Users/gauravsharma/work/YoutubePlaylistPlayer/node_modules/superagent-proxy/index.js"],"names":["proxyAgent","require","debug","module","exports","setup","superagent","uri","Request","prototype","proxy","call","setupUrl","agent","_proxyUri","req","desc","Object","getOwnPropertyDescriptor","get","getUrl","set","setUrl","_url","url","value","writable","defineProperty","v"],"mappings":"AACA;AACA;AACA;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,aAAD,CAAxB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAAP,CAAiB,kBAAjB,CAAZ;AAEA;AACA;AACA;;;AAEAE,MAAM,CAACC,OAAP,GAAiBC,KAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,KAAT,CAAgBC,UAAhB,EAA4BC,GAA5B,EAAiC;AAC/B,MAAIC,OAAO,GAAGF,UAAU,CAACE,OAAzB;;AACA,MAAIA,OAAJ,EAAa;AACX;AACAA,IAAAA,OAAO,CAACC,SAAR,CAAkBC,KAAlB,GAA0BA,KAA1B;AACA,WAAOJ,UAAP;AACD,GAJD,MAIO;AACL;AACA,WAAOI,KAAK,CAACC,IAAN,CAAWL,UAAX,EAAuBC,GAAvB,CAAP;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASG,KAAT,CAAgBH,GAAhB,EAAqB;AACnBL,EAAAA,KAAK,CAAC,mBAAD,EAAsBK,GAAtB,CAAL,CADmB,CAGnB;AACA;AACA;AACA;;AACAK,EAAAA,QAAQ,CAAC,IAAD,CAAR,CAPmB,CASnB;;AACA,MAAIC,KAAK,GAAGb,UAAU,CAACO,GAAD,CAAtB,CAVmB,CAYnB;;AACA,MAAIM,KAAJ,EAAW,KAAKA,KAAL,CAAWA,KAAX,EAbQ,CAenB;;AACA,OAAKC,SAAL,GAAiBP,GAAjB;AAEA,SAAO,IAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASK,QAAT,CAAmBG,GAAnB,EAAwB;AACtB,MAAIC,IAAI,GAAGC,MAAM,CAACC,wBAAP,CAAgCH,GAAhC,EAAqC,KAArC,CAAX;AACA,MAAIC,IAAI,CAACG,GAAL,IAAYC,MAAZ,IAAsBJ,IAAI,CAACK,GAAL,IAAYC,MAAtC,EAA8C,OAFxB,CAEgC;AAEtD;;AACAP,EAAAA,GAAG,CAACQ,IAAJ,GAAWR,GAAG,CAACS,GAAf;AAEAR,EAAAA,IAAI,CAACG,GAAL,GAAWC,MAAX;AACAJ,EAAAA,IAAI,CAACK,GAAL,GAAWC,MAAX;AACA,SAAON,IAAI,CAACS,KAAZ;AACA,SAAOT,IAAI,CAACU,QAAZ;AAEAT,EAAAA,MAAM,CAACU,cAAP,CAAsBZ,GAAtB,EAA2B,KAA3B,EAAkCC,IAAlC;AACAd,EAAAA,KAAK,CAAC,uDAAD,CAAL;AACD;AAED;AACA;AACA;AACA;AACA;;;AAEA,SAASkB,MAAT,GAAmB;AACjB,SAAO,KAAKG,IAAZ;AACD;AAED;AACA;AACA;AACA;AACA;;;AAEA,SAASD,MAAT,CAAiBM,CAAjB,EAAoB;AAClB1B,EAAAA,KAAK,CAAC,gBAAD,EAAmB0B,CAAnB,CAAL;AACA,OAAKL,IAAL,GAAYK,CAAZ;AACAlB,EAAAA,KAAK,CAACC,IAAN,CAAW,IAAX,EAAiB,KAAKG,SAAtB;AACD","sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar proxyAgent = require('proxy-agent');\nvar debug = require('debug')('superagent-proxy');\n\n/**\n * Module exports.\n */\n\nmodule.exports = setup;\n\n/**\n * Adds a `.proxy(uri)` function to the \"superagent\" module's Request class.\n *\n * ``` js\n * var request = require('superagent');\n * require('superagent-proxy')(request);\n *\n * request\n *   .get(uri)\n *   .proxy(uri)\n *   .end(fn);\n * ```\n *\n * Or, you can pass in a `superagent.Request` instance, and it's like calling the\n * `.proxy(uri)` function on it, but without extending the prototype:\n *\n * ``` js\n * var request = require('superagent');\n * var proxy = require('superagent-proxy');\n *\n * proxy(request.get(uri), uri).end(fn);\n * ```\n *\n * @param {Object} superagent The `superagent` exports object\n * @api public\n */\n\nfunction setup (superagent, uri) {\n  var Request = superagent.Request;\n  if (Request) {\n    // the superagent exports object - extent Request with \"proxy\"\n    Request.prototype.proxy = proxy;\n    return superagent;\n  } else {\n    // assume it's a `superagent.Request` instance\n    return proxy.call(superagent, uri);\n  }\n}\n\n/**\n * Sets the proxy server to use for this HTTP(s) request.\n *\n * @param {String} uri proxy url\n * @api public\n */\n\nfunction proxy (uri) {\n  debug('Request#proxy(%o)', uri);\n\n  // we need to observe the `url` field from now on... Superagent sometimes\n  // re-uses the `req` instance but changes its `url` field (i.e. in the case of\n  // a redirect), so when that happens we need to potentially re-set the proxy\n  // agent\n  setupUrl(this);\n\n  // attempt to get a proxying `http.Agent` instance\n  var agent = proxyAgent(uri);\n\n  // if we have an `http.Agent` instance then call the .agent() function\n  if (agent) this.agent(agent);\n\n  // store the proxy URI in case of changes to the `url` prop in the future\n  this._proxyUri = uri;\n\n  return this;\n}\n\n/**\n * Sets up a get/set descriptor for the `url` property of the provided `req`\n * Request instance. This is so that we can re-run the \"proxy agent\" logic when\n * the `url` field is changed, i.e. during a 302 Redirect scenario.\n *\n * @api private\n */\n\nfunction setupUrl (req) {\n  var desc = Object.getOwnPropertyDescriptor(req, 'url');\n  if (desc.get == getUrl && desc.set == setUrl) return; // already patched\n\n  // save current value\n  req._url = req.url;\n\n  desc.get = getUrl;\n  desc.set = setUrl;\n  delete desc.value;\n  delete desc.writable;\n\n  Object.defineProperty(req, 'url', desc);\n  debug('patched superagent Request \"url\" property for changes');\n}\n\n/**\n * `url` property getter.\n *\n * @api protected\n */\n\nfunction getUrl () {\n  return this._url;\n}\n\n/**\n * `url` property setter.\n *\n * @api protected\n */\n\nfunction setUrl (v) {\n  debug('set `.url`: %o', v);\n  this._url = v;\n  proxy.call(this, this._proxyUri);\n}\n"]},"metadata":{},"sourceType":"script"}