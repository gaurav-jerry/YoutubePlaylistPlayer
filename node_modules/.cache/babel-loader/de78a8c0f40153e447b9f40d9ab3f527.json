{"ast":null,"code":"/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2015 Mailjet\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n */\nconst DEBUG_MODE = false;\nconst RESOURCE = 0;\nconst ID = 1;\nconst ACTION = 2;\n/*\n * Imports.\n *\n * qs is used to format the url from the provided parameters and method\n * _path will join a path according to the OS specifications\n * https will be used to make a secure http request to the API\n * fs will simply be used to read files\n */\n\nconst qs = require('querystring');\n\nconst request = require('superagent');\n\nconst Promise = require('bluebird');\n\nconst _path = require('path');\n\nconst JSONb = require('json-bigint')({\n  storeAsString: true\n});\n\nconst version = require('./package.json').version;\n/* Extend superagent request with proxy method */\n\n\nrequire('superagent-proxy')(request);\n/*\n * MailjetClient constructor.\n *\n * @qpi_key (optional) {String} mailjet account api key\n * @api_secret (optional) {String} mailjet account api secret\n * @options (optional) {Object} additional connection options\n *\n * If you don't know what this is about, sign up to Mailjet at:\n * https://www.mailjet.com/\n */\n\n\nfunction MailjetClient(api_key, api_secret, options, perform_api_call) {\n  return this.authStrategy(api_key, api_secret, options, perform_api_call);\n}\n/**\n * @param (optional){String} api_key || api_token\n * @param (optional){String} api_secret\n * @param (optional){Object} options\n * @param (optional){any} perform_api_call\n */\n\n\nMailjetClient.prototype.authStrategy = function (api_key, api_secret, options, perform_api_call) {\n  var isTokenRequired = this.isTokenRequired(api_key, api_secret, options, perform_api_call);\n  var self = this; // Check if api version requires toekn authentication\n  // This is one of the approaches, maybe there is better\n\n  if (isTokenRequired) {\n    // params are shifted one position to left as we don't have api secret any more\n    // api_key becomes api_token\n    // api_secret becomes options\n    // options becomes perform_api_call\n    return tokenAuthentication(api_key, api_secret, options);\n  } else {\n    // params are in correct order\n    return basicAuthentication(api_key, api_secret, options, perform_api_call);\n  }\n  /**\n   *\n   * @param (optional){String} api_key mailjet api key\n   * @param (optional){String} api_secret mailjet api secret\n   * @param (optional){Object} options additional connection options\n   * @param (optional){boolean} perform_api_call\n   */\n\n\n  function basicAuthentication(api_key, api_secret, options, perform_api_call) {\n    self.config = self.setConfig(options);\n    self.perform_api_call = perform_api_call || false; // To be updated according to the npm repo version\n\n    self.version = version;\n\n    if (api_key && api_secret) {\n      self.connect(api_key, api_secret, options);\n    }\n\n    return self;\n  }\n  /**\n   *\n   * @param (optional){String} api_token mailjet api token\n   * @param (optional){Object} options additional connection options\n   * @param (optional){boolean} perform_api_call\n   */\n\n\n  function tokenAuthentication(api_token, options, perform_api_call) {\n    self.perform_api_call = perform_api_call || false; // To be updated according to the npm repo version\n\n    self.version = version;\n\n    if (api_token) {\n      self.connect(api_token, options);\n    }\n\n    return self;\n  }\n};\n\nMailjetClient.prototype.isTokenRequired = function () {\n  var args = [].slice.call(arguments);\n  var vals = args.filter(a => a !== undefined);\n\n  if (DEBUG_MODE) {\n    console.log('Defined arguments: ' + JSON.stringify(vals));\n  }\n\n  return vals.length === 1 || vals.length >= 2 && typeof vals[1] === 'object';\n};\n\nMailjetClient.prototype.typeJson = function (body) {\n  var keys = Object.keys(body);\n\n  for (var i in keys) {\n    var key = keys[i];\n    body[key] = parseInt(body[key]) || body[key];\n  }\n\n  return body;\n};\n/*\n * [Static] connect.\n *\n * Return a nez connected instance of the MailjetClient class\n *\n * @k {String} mailjet qpi key\n * @s {String} mailjet api secret\n * @o {String} optional connection options\n *\n */\n\n\nMailjetClient.connect = function (k, s, o) {\n  return new MailjetClient().connect(k, s, o);\n};\n/*\n * connect.\n *\n * create a auth property from the api key and secret\n *\n * @apiKey || @apiToken {String}\n * @apiSecret {String}\n * @options {Object}\n *\n */\n\n\nMailjetClient.prototype.connect = function (apiKey, apiSecret, options) {\n  return this.connectStrategy(apiKey, apiSecret, options);\n};\n/**\n * @param (optional){String} apiKey || apiToken\n * @param (optional){String} apiSecret\n * @param (optional){Object} options\n */\n\n\nMailjetClient.prototype.connectStrategy = function (apiKey, apiSecret, options) {\n  var self = this;\n  var isTokenRequired = this.isTokenRequired(apiKey, apiSecret, options);\n\n  if (isTokenRequired) {\n    return tokenConnectStrategy(apiKey, apiSecret);\n  } else {\n    return basicConnectStrategy(apiKey, apiSecret, options);\n  }\n\n  function basicConnectStrategy(apiKey, apiSecret, options) {\n    if (!apiKey) {\n      throw new Error('Mailjet API_KEY is required');\n    }\n\n    if (!apiSecret) {\n      throw new Error('Mailjet API_SECRET is required');\n    }\n\n    setOptions(options);\n    self.apiKey = apiKey;\n    self.apiSecret = apiSecret;\n    return self;\n  }\n\n  function tokenConnectStrategy(apiToken, options) {\n    setOptions(options);\n\n    if (!apiToken) {\n      throw new Error('Mailjet API_TOKEN is required');\n    }\n\n    self.apiToken = apiToken;\n    return self;\n  }\n\n  function setOptions(options) {\n    self.options = options || {};\n\n    if (self.options) {\n      self.config = self.setConfig(options);\n    }\n  }\n};\n\nMailjetClient.prototype.setConfig = function (options) {\n  const config = require('./config');\n\n  if (typeof options === 'object' && options != null && options.length != 0) {\n    if (options.url) config.url = options.url;\n    if (options.version) config.version = options.version;\n    if (options.perform_api_call) config.perform_api_call = options.perform_api_call;\n  } else if (options != null) {\n    throw new Error('warning, your options variable is not a valid object.');\n  }\n\n  return config;\n};\n/*\n * path.\n *\n * Returns a formatted url from a http method and\n * a parameters object literal\n *\n * @resource {String}\n * @sub {String} REST/''/DATA\n * @params {Object literal} {name: value}\n *\n */\n\n\nMailjetClient.prototype.path = function (resource, sub, params, options) {\n  if (DEBUG_MODE) {\n    console.log('resource =', resource);\n    console.log('subPath =', sub);\n    console.log('filters =', params);\n  }\n\n  const url = options && 'url' in options ? options.url : this.config.url;\n  const api_version = options && 'version' in options ? options.version : this.config.version;\n\n  var base = _path.join(api_version, sub);\n\n  if (Object.keys(params).length === 0) {\n    return _path.join(url, base + '/' + resource);\n  }\n\n  var q = qs.stringify(params);\n  return _path.join(url, base + '/' + resource + '/?' + q);\n};\n/*\n * httpRequest.\n *\n * @method {String} http method (GET/POST...)\n * @url {String} url path to be used for the request\n * @data {Object literal} additional data espacially for POST/PUT operations\n * @callback -optional {Function} called on response from the server, or on error\n *\n * @return a promise triggering 'success' on response\n * \t\tand error on error\n */\n\n\nMailjetClient.prototype.httpRequest = function (method, url, data, callback, perform_api_call) {\n  var req = request[method](url).set('user-agent', 'mailjet-api-v3-nodejs/' + this.version).set('Content-type', url.indexOf('text:plain') > -1 ? 'text/plain' : 'application/json');\n\n  if (this.apiToken) {\n    req.set('Authorization', 'Bearer ' + this.apiToken);\n  } else {\n    req.auth(this.apiKey, this.apiSecret);\n  }\n\n  if (this.options.proxyUrl) {\n    req = req.proxy(this.options.proxyUrl);\n  }\n\n  if (this.options.timeout) {\n    req = req.timeout(this.options.timeout);\n  }\n\n  const payload = method === 'post' || method === 'put' ? data : {};\n\n  if (DEBUG_MODE) {\n    console.log('Final url: ' + url);\n    console.log('body: ' + JSON.stringify(payload));\n  }\n\n  if (perform_api_call === false || this.perform_api_call) {\n    return Promise.resolve({\n      body: payload,\n      url: url\n    });\n  }\n\n  if (method === 'delete') {\n    method = 'del';\n  }\n\n  if (method === 'post' || method === 'put') {\n    req = req.send(data);\n  }\n\n  return new Promise(function (resolve, reject) {\n    const ret = function (err, result) {\n      return typeof callback === 'function' ? callback(err, result) : err ? reject(err) : resolve(result);\n    };\n\n    req.end(function (err, result) {\n      var body;\n\n      try {\n        body = JSONb.parse(result.text);\n      } catch (e) {\n        body = {};\n      }\n\n      if (err) {\n        const error = new Error();\n        error.ErrorMessage = body.ErrorMessage || err.message;\n        error.ErrorIdentifier = body.ErrorIdentifier;\n        error.statusCode = err.status || null;\n        error.response = result || null;\n        error.message = 'Unsuccessful: ' + error.statusCode + ' ' + error.ErrorMessage;\n        return ret(error);\n      }\n\n      return ret(null, {\n        response: result,\n        body: body\n      });\n    });\n  });\n};\n/*\n *\n * MailjetResource constructor\n *\n * This class creates a function that can be build through method chaining\n *\n * @method {String} http method\n * @func {String} resource/path to be sent\n * @context {MailjetClient[instance]} parent client\n */\n\n\nfunction MailjetResource(method, func, options, context) {\n  this.base = func;\n  this.callUrl = func;\n  this.options = options || context.options;\n  this.resource = func.toLowerCase();\n  this.lastAdded = RESOURCE;\n  var self = context;\n  /*\n  It can be REST or nothing if we only know the resource\n  */\n\n  this.subPath = function () {\n    if (func.toLowerCase() !== 'send' && func.indexOf('sms') === -1) {\n      return 'REST';\n    }\n\n    return '';\n  }();\n  /**\n   *\n   * result.\n   *\n   * @params (optional) {Object Littteral} parameters to be sent to the server\n   * @callback (optional) {Function} called on response or error\n   */\n\n\n  var that = this;\n\n  this.result = function (params, callback) {\n    params = params || {};\n\n    if (typeof params === 'function') {\n      callback = params;\n      params = {};\n    }\n    /*\n    We build the querystring depending on the parameters. if the user explicitly mentionned\n    a filters property, we pass it to the url\n    */\n\n\n    var path = self.path(that.callUrl, that.subPath, function () {\n      if (params.filters) {\n        var ret = params.filters;\n        delete params.filters;\n        return ret;\n      } else if (method === 'get') {\n        return params;\n      } else {\n        return {};\n      }\n    }(), that.options);\n    var perform_api_call = null;\n\n    if (that.options && 'perform_api_call' in that.options) {\n      perform_api_call = that.options.perform_api_call;\n    } else {\n      perform_api_call = self.config.perform_api_call;\n    }\n\n    that.callUrl = that.base;\n    self.lastAdded = RESOURCE;\n    return self.httpRequest(method, 'https://' + path, params, callback, perform_api_call);\n  };\n}\n/**\n *\n * id.\n *\n * Add an ID and prevent invalid id chaining\n *\n * @value {String/Number} append an id to the path\n * @return the MailjetResource instance to allow method chaining\n *\n */\n\n\nMailjetResource.prototype.id = function (value) {\n  if (this.lastAdded === ID && DEBUG_MODE) {\n    console.warn('[WARNING] your request may fail due to invalid id chaining');\n  }\n\n  this.callUrl = _path.join(this.callUrl, value.toString());\n  this.lastAdded = ID;\n  return this;\n};\n/**\n *\n * action.\n *\n * Add an Action and prevent invalid action chaining\n *\n * @value {String} append an action to the path\n * @return the MailjetResource instance to allow method chaining\n *\n */\n\n\nMailjetResource.prototype.action = function (name) {\n  if (this.lastAdded === ACTION && DEBUG_MODE) {\n    console.warn('[WARNING] your request may fail due to invalid action chaining');\n  }\n\n  this.callUrl = _path.join(this.callUrl, name);\n  this.action = name.toLowerCase();\n  this.lastAdded = ACTION;\n\n  if (this.action.toLowerCase() === 'csvdata') {\n    this.action = 'csvdata/text:plain';\n  } else if (this.action.toLowerCase() === 'csverror') {\n    this.action = 'csverror/text:csv';\n  }\n\n  var self = this;\n\n  this.subPath = function () {\n    if (self.resource === 'contactslist' && self.action === 'csvdata/text:plain' || self.resource === 'batchjob' && self.action === 'csverror/text:csv') {\n      return 'DATA';\n    } else {\n      return self.subPath;\n    }\n  }();\n\n  return self;\n};\n/**\n *\n * request.\n *\n * @parmas {Object literal} method parameters\n * @callback (optional) {Function} triggered when done\n *\n * @return {String} the server response\n */\n\n\nMailjetResource.prototype.request = function (params, callback) {\n  return this.result(params, callback).catch(function (err) {\n    try {\n      const ErrorDetails = JSON.parse(err.response.text);\n      const fullMessage = ErrorDetails.Messages[0].Errors[0].ErrorMessage;\n\n      if (typeof fullMessage === \"string\") {\n        err.message = err.message + \";\\n\" + fullMessage;\n        throw err;\n      }\n\n      throw err;\n    } catch {\n      throw err;\n    }\n  });\n};\n/*\n * post.\n *\n * @func {String} required Mailjet API function to be used (can contain a whole action path)\n *\n * @returns a function that make an httpRequest for each call\n */\n\n\nMailjetClient.prototype.post = function (func, options) {\n  return new MailjetResource('post', func, options, this);\n};\n/*\n * get.\n *\n * @func {String} required Mailjet API function to be used (can contain a whole action path)\n *\n * @returns a function that make an httpRequest for each call\n */\n\n\nMailjetClient.prototype.get = function (func, options) {\n  return new MailjetResource('get', func, options, this);\n};\n/*\n * delete.\n *\n * @func {String} required Mailjet API function to be used (can contain a whole action path)\n *\n * @returns a function that make an httpRequest for each call\n */\n\n\nMailjetClient.prototype.delete = function (func, options) {\n  return new MailjetResource('delete', func, options, this);\n};\n/*\n * put.\n *\n * @func {String} required Mailjet API function to be used (can contain a whole action path)\n *\n * @returns a function that make an httpRequest for each call\n */\n\n\nMailjetClient.prototype.put = function (func, options) {\n  return new MailjetResource('put', func, options, this);\n};\n/*\n * Exports the Mailjet client.\n *\n * you can require it like so:\n * var mj = require ('./mailjet-client')\n *\n * or for the bleeding edge developpers out there:\n * import mj from './mailjet-client'\n */\n\n\nmodule.exports = MailjetClient;","map":{"version":3,"sources":["/Users/gauravsharma/work/YoutubePlaylistPlayer/node_modules/node-mailjet/mailjet-client.js"],"names":["DEBUG_MODE","RESOURCE","ID","ACTION","qs","require","request","Promise","_path","JSONb","storeAsString","version","MailjetClient","api_key","api_secret","options","perform_api_call","authStrategy","prototype","isTokenRequired","self","tokenAuthentication","basicAuthentication","config","setConfig","connect","api_token","args","slice","call","arguments","vals","filter","a","undefined","console","log","JSON","stringify","length","typeJson","body","keys","Object","i","key","parseInt","k","s","o","apiKey","apiSecret","connectStrategy","tokenConnectStrategy","basicConnectStrategy","Error","setOptions","apiToken","url","path","resource","sub","params","api_version","base","join","q","httpRequest","method","data","callback","req","set","indexOf","auth","proxyUrl","proxy","timeout","payload","resolve","send","reject","ret","err","result","end","parse","text","e","error","ErrorMessage","message","ErrorIdentifier","statusCode","status","response","MailjetResource","func","context","callUrl","toLowerCase","lastAdded","subPath","that","filters","id","value","warn","toString","action","name","catch","ErrorDetails","fullMessage","Messages","Errors","post","get","delete","put","module","exports"],"mappings":"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","sourcesContent":["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2015 Mailjet\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n */\n\nconst DEBUG_MODE = false\nconst RESOURCE = 0\nconst ID = 1\nconst ACTION = 2\n\n/*\n * Imports.\n *\n * qs is used to format the url from the provided parameters and method\n * _path will join a path according to the OS specifications\n * https will be used to make a secure http request to the API\n * fs will simply be used to read files\n */\n\nconst qs = require('querystring')\nconst request = require('superagent')\nconst Promise = require('bluebird')\nconst _path = require('path')\nconst JSONb = require('json-bigint')({ storeAsString: true })\nconst version = require('./package.json').version\n\n/* Extend superagent request with proxy method */\nrequire('superagent-proxy')(request)\n\n/*\n * MailjetClient constructor.\n *\n * @qpi_key (optional) {String} mailjet account api key\n * @api_secret (optional) {String} mailjet account api secret\n * @options (optional) {Object} additional connection options\n *\n * If you don't know what this is about, sign up to Mailjet at:\n * https://www.mailjet.com/\n */\nfunction MailjetClient (api_key, api_secret, options, perform_api_call) {\n  return this.authStrategy(api_key, api_secret, options, perform_api_call)\n}\n\n/**\n * @param (optional){String} api_key || api_token\n * @param (optional){String} api_secret\n * @param (optional){Object} options\n * @param (optional){any} perform_api_call\n */\nMailjetClient.prototype.authStrategy = function(api_key, api_secret, options, perform_api_call) {\n\n  var isTokenRequired = this.isTokenRequired(api_key, api_secret, options, perform_api_call)\n  var self = this\n  // Check if api version requires toekn authentication\n  // This is one of the approaches, maybe there is better\n  if (isTokenRequired) {\n    // params are shifted one position to left as we don't have api secret any more\n    // api_key becomes api_token\n    // api_secret becomes options\n    // options becomes perform_api_call\n    return tokenAuthentication(api_key, api_secret, options)\n  } else {\n    // params are in correct order\n    return basicAuthentication(api_key, api_secret, options, perform_api_call)\n  }\n\n  /**\n   *\n   * @param (optional){String} api_key mailjet api key\n   * @param (optional){String} api_secret mailjet api secret\n   * @param (optional){Object} options additional connection options\n   * @param (optional){boolean} perform_api_call\n   */\n  function basicAuthentication(api_key, api_secret, options, perform_api_call) {\n\n    self.config = self.setConfig(options)\n    self.perform_api_call = perform_api_call || false\n    // To be updated according to the npm repo version\n    self.version = version\n    if (api_key && api_secret) {\n      self.connect(api_key, api_secret, options)\n    }\n\n    return self\n  }\n\n  /**\n   *\n   * @param (optional){String} api_token mailjet api token\n   * @param (optional){Object} options additional connection options\n   * @param (optional){boolean} perform_api_call\n   */\n  function tokenAuthentication(api_token, options, perform_api_call) {\n    self.perform_api_call = perform_api_call || false\n    // To be updated according to the npm repo version\n    self.version = version\n    if (api_token) {\n      self.connect(api_token, options)\n    }\n\n    return self\n  }\n}\n\nMailjetClient.prototype.isTokenRequired = function () {\n  var args = [].slice.call(arguments)\n  var vals = args.filter(a => a !== undefined)\n\n  if (DEBUG_MODE) {\n    console.log('Defined arguments: ' + JSON.stringify(vals))\n  }\n\n  return (vals.length === 1 || (vals.length >= 2 && typeof vals[1] === 'object'))\n}\n\nMailjetClient.prototype.typeJson = function (body) {\n  var keys = Object.keys(body)\n  for (var i in keys) {\n    var key = keys[i]\n    body[key] = parseInt(body[key]) || body[key]\n  }\n  return body\n}\n\n/*\n * [Static] connect.\n *\n * Return a nez connected instance of the MailjetClient class\n *\n * @k {String} mailjet qpi key\n * @s {String} mailjet api secret\n * @o {String} optional connection options\n *\n */\nMailjetClient.connect = function (k, s, o) {\n  return new MailjetClient().connect(k, s, o)\n}\n\n/*\n * connect.\n *\n * create a auth property from the api key and secret\n *\n * @apiKey || @apiToken {String}\n * @apiSecret {String}\n * @options {Object}\n *\n */\nMailjetClient.prototype.connect = function (apiKey, apiSecret, options) {\n  return this.connectStrategy(apiKey, apiSecret, options)\n}\n\n/**\n * @param (optional){String} apiKey || apiToken\n * @param (optional){String} apiSecret\n * @param (optional){Object} options\n */\nMailjetClient.prototype.connectStrategy = function (apiKey, apiSecret, options) {\n\n  var self = this\n  var isTokenRequired = this.isTokenRequired(apiKey, apiSecret, options)\n\n  if (isTokenRequired) {\n    return tokenConnectStrategy(apiKey, apiSecret)\n  } else {\n    return basicConnectStrategy(apiKey, apiSecret, options)\n  }\n\n  function basicConnectStrategy(apiKey, apiSecret, options) {\n    if (!apiKey) {\n      throw new Error('Mailjet API_KEY is required');\n    }\n    if (!apiSecret) {\n      throw new Error('Mailjet API_SECRET is required');\n    }\n\n    setOptions(options)\n    self.apiKey = apiKey\n    self.apiSecret = apiSecret\n    return self\n  }\n\n  function tokenConnectStrategy(apiToken, options) {\n    setOptions(options)\n    if (!apiToken) {\n      throw new Error('Mailjet API_TOKEN is required');\n    }\n\n    self.apiToken = apiToken\n    return self\n  }\n\n  function setOptions(options) {\n    self.options = options || {}\n    if (self.options) {\n      self.config = self.setConfig(options)\n    }\n  }\n}\n\nMailjetClient.prototype.setConfig = function (options) {\n  const config = require('./config')\n  if (typeof options === 'object' && options != null && options.length != 0) {\n    if (options.url) config.url = options.url\n    if (options.version) config.version = options.version\n    if (options.perform_api_call) config.perform_api_call = options.perform_api_call\n  } else if (options != null) {\n    throw new Error('warning, your options variable is not a valid object.')\n  }\n\n  return config\n}\n\n/*\n * path.\n *\n * Returns a formatted url from a http method and\n * a parameters object literal\n *\n * @resource {String}\n * @sub {String} REST/''/DATA\n * @params {Object literal} {name: value}\n *\n */\nMailjetClient.prototype.path = function (resource, sub, params, options) {\n  if (DEBUG_MODE) {\n    console.log('resource =', resource)\n    console.log('subPath =', sub)\n    console.log('filters =', params)\n  }\n\n  const url = (options && 'url' in options ? options.url : this.config.url)\n  const api_version = (options && 'version' in options ? options.version : this.config.version)\n\n  var base = _path.join(api_version, sub)\n  if (Object.keys(params).length === 0) {\n    return _path.join(url, base + '/' + resource)\n  }\n\n  var q = qs.stringify(params);\n  return _path.join(url, base + '/' + resource + '/?' + q)\n}\n\n/*\n * httpRequest.\n *\n * @method {String} http method (GET/POST...)\n * @url {String} url path to be used for the request\n * @data {Object literal} additional data espacially for POST/PUT operations\n * @callback -optional {Function} called on response from the server, or on error\n *\n * @return a promise triggering 'success' on response\n * \t\tand error on error\n */\n\nMailjetClient.prototype.httpRequest = function (method, url, data, callback, perform_api_call){\n  var req = request[method](url)\n    .set('user-agent', 'mailjet-api-v3-nodejs/' + this.version)\n\n    .set('Content-type', url.indexOf('text:plain') > -1\n      ? 'text/plain'\n      : 'application/json')\n\n  if (this.apiToken) {\n    req.set('Authorization', 'Bearer ' + this.apiToken)\n  } else {\n    req.auth(this.apiKey, this.apiSecret)\n  }\n\n  if (this.options.proxyUrl) {\n    req = req.proxy(this.options.proxyUrl)\n  }\n  if (this.options.timeout) {\n    req = req.timeout(this.options.timeout)\n  }\n\n  const payload = method === 'post' || method === 'put' ? data : {}\n\n  if (DEBUG_MODE) {\n    console.log('Final url: ' + url)\n    console.log('body: ' + JSON.stringify(payload))\n  }\n\n  if (perform_api_call === false || this.perform_api_call) {\n    return Promise.resolve({body: payload, url: url})\n  }\n\n  if (method === 'delete') { method = 'del' }\n  if (method === 'post' || method === 'put') { req = req.send(data) }\n\n  return new Promise(function (resolve, reject) {\n\n    const ret = function (err, result) {\n      return typeof callback === 'function'\n        ? callback(err, result)\n        : err\n          ? reject(err)\n          : resolve(result)\n    }\n\n    req.end(function (err, result) {\n      var body\n\n      try {\n        body = JSONb.parse(result.text)\n      } catch (e) {\n        body = {}\n      }\n\n      if (err) {\n        const error = new Error()\n        error.ErrorMessage = body.ErrorMessage || err.message\n        error.ErrorIdentifier = body.ErrorIdentifier\n        error.statusCode = err.status || null\n        error.response = result || null\n        error.message = 'Unsuccessful: ' + error.statusCode + ' ' + error.ErrorMessage\n        return ret(error)\n      }\n\n      return ret(null, {\n        response: result,\n        body: body\n      })\n    })\n  })\n}\n\n/*\n *\n * MailjetResource constructor\n *\n * This class creates a function that can be build through method chaining\n *\n * @method {String} http method\n * @func {String} resource/path to be sent\n * @context {MailjetClient[instance]} parent client\n */\nfunction MailjetResource (method, func, options, context) {\n  this.base = func\n  this.callUrl = func\n  this.options = options || context.options\n\n  this.resource = func.toLowerCase()\n\n  this.lastAdded = RESOURCE\n  var self = context\n\n  /*\n  It can be REST or nothing if we only know the resource\n  */\n  this.subPath = (function () {\n    if (func.toLowerCase() !== 'send' && func.indexOf('sms') === -1) {\n      return 'REST'\n    }\n    return ''\n  })()\n\n  /**\n   *\n   * result.\n   *\n   * @params (optional) {Object Littteral} parameters to be sent to the server\n   * @callback (optional) {Function} called on response or error\n   */\n  var that = this\n  this.result = function (params, callback) {\n    params = params || {}\n    if (typeof params === 'function') {\n      callback = params\n      params = {}\n    }\n\n    /*\n    We build the querystring depending on the parameters. if the user explicitly mentionned\n    a filters property, we pass it to the url\n    */\n    var path = self.path(that.callUrl, that.subPath, (function () {\n      if (params.filters) {\n        var ret = params.filters\n        delete params.filters\n        return ret\n      } else if (method === 'get') {\n        return params\n      } else {\n        return {}\n      }\n    })(), that.options)\n\n    var perform_api_call = null\n    if (that.options && 'perform_api_call' in that.options) {\n      perform_api_call = that.options.perform_api_call\n    } else {\n      perform_api_call = self.config.perform_api_call\n    }\n\n    that.callUrl = that.base\n    self.lastAdded = RESOURCE\n    return self.httpRequest(method, 'https://' + path, params, callback, perform_api_call)\n  }\n}\n\n/**\n *\n * id.\n *\n * Add an ID and prevent invalid id chaining\n *\n * @value {String/Number} append an id to the path\n * @return the MailjetResource instance to allow method chaining\n *\n */\nMailjetResource.prototype.id = function (value) {\n  if (this.lastAdded === ID && DEBUG_MODE) {\n    console.warn('[WARNING] your request may fail due to invalid id chaining')\n  }\n\n  this.callUrl = _path.join(this.callUrl, value.toString())\n  this.lastAdded = ID\n  return this\n}\n\n/**\n *\n * action.\n *\n * Add an Action and prevent invalid action chaining\n *\n * @value {String} append an action to the path\n * @return the MailjetResource instance to allow method chaining\n *\n */\nMailjetResource.prototype.action = function (name) {\n  if (this.lastAdded === ACTION && DEBUG_MODE) {\n    console.warn('[WARNING] your request may fail due to invalid action chaining')\n  }\n\n  this.callUrl = _path.join(this.callUrl, name)\n  this.action = name.toLowerCase()\n\n  this.lastAdded = ACTION\n\n  if (this.action.toLowerCase() === 'csvdata') {\n    this.action = 'csvdata/text:plain'\n  } else if (this.action.toLowerCase() === 'csverror') {\n    this.action = 'csverror/text:csv'\n  }\n\n  var self = this\n  this.subPath = (function () {\n    if (self.resource === 'contactslist' && self.action === 'csvdata/text:plain' ||\n      self.resource === 'batchjob' && self.action === 'csverror/text:csv') {\n      return 'DATA'\n    } else {\n      return self.subPath\n    }\n  })()\n  return self\n}\n\n/**\n *\n * request.\n *\n * @parmas {Object literal} method parameters\n * @callback (optional) {Function} triggered when done\n *\n * @return {String} the server response\n */\n\nMailjetResource.prototype.request = function (params, callback) {\n  return this.result(params, callback).catch(function (err) {\n    try {\n      const ErrorDetails = JSON.parse(err.response.text);\n      const fullMessage = ErrorDetails.Messages[0].Errors[0].ErrorMessage;\n\n      if (typeof fullMessage === \"string\") {\n        err.message = err.message + \";\\n\" + fullMessage;\n        throw err;\n      }\n      throw err;\n    } catch {\n      throw err;\n    }\n  });\n};\n\n/*\n * post.\n *\n * @func {String} required Mailjet API function to be used (can contain a whole action path)\n *\n * @returns a function that make an httpRequest for each call\n */\nMailjetClient.prototype.post = function (func, options) {\n  return new MailjetResource('post', func, options, this)\n}\n\n/*\n * get.\n *\n * @func {String} required Mailjet API function to be used (can contain a whole action path)\n *\n * @returns a function that make an httpRequest for each call\n */\nMailjetClient.prototype.get = function (func, options) {\n  return new MailjetResource('get', func, options, this)\n}\n\n/*\n * delete.\n *\n * @func {String} required Mailjet API function to be used (can contain a whole action path)\n *\n * @returns a function that make an httpRequest for each call\n */\nMailjetClient.prototype.delete = function (func, options) {\n  return new MailjetResource('delete', func, options, this)\n}\n\n/*\n * put.\n *\n * @func {String} required Mailjet API function to be used (can contain a whole action path)\n *\n * @returns a function that make an httpRequest for each call\n */\nMailjetClient.prototype.put = function (func, options) {\n  return new MailjetResource('put', func, options, this)\n}\n\n/*\n * Exports the Mailjet client.\n *\n * you can require it like so:\n * var mj = require ('./mailjet-client')\n *\n * or for the bleeding edge developpers out there:\n * import mj from './mailjet-client'\n */\nmodule.exports = MailjetClient\n"]},"metadata":{},"sourceType":"script"}