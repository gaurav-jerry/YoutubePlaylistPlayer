{"ast":null,"code":"var _jsxFileName = \"/Users/gauravsharma/work/Youtube Player/youtube-playlist-player/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from 'react';\nimport axios from 'axios';\nimport YouTube from 'react-youtube';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [songs, setsongs] = useState([]);\n  const [currentPlaying, setcurrentPlaying] = useState(null);\n  const myRef = useRef(null);\n  useEffect(() => {\n    axios({\n      url: 'https://www.googleapis.com/youtube/v3/playlistItems?part=snippet%2CcontentDetails&maxResults=9&playlistId=PLcjXjwgJpOzZoOYXz8y3I2PE_HspGkUry&key=AIzaSyA43Saqt5kUkQwm-BV_tWWwgA8HP5bwbXE',\n      method: 'get'\n    }).then(response => setsongs(response.data.items)); //console.log(songs);\n  }, []);\n  const opts = {\n    height: '500',\n    width: '100%',\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1\n    }\n  };\n\n  const onPlayBtnClick = item => {\n    setcurrentPlaying(item);\n    myRef.current.scrollIntoView();\n  };\n\n  console.log(songs);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'app-wrapper',\n    children: [\" \", currentPlaying && /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: myRef,\n      children: /*#__PURE__*/_jsxDEV(YouTube, {\n        videoId: currentPlaying.contentDetails.videoId,\n        opts: opts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'list-container',\n      children: songs.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: 'List-Item',\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            alt: \"video-thumbnail\",\n            src: item.snippet.thumbnails.default.url\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: 'list-title',\n            children: item.snippet.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: 'list-item-action-btn',\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => onPlayBtnClick(item),\n              children: \"Play\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 53\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 9\n        }, this)\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 26\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"nYzEbfOsYo8vwZ9Dby7ljS1/vIA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/gauravsharma/work/Youtube Player/youtube-playlist-player/src/App.js"],"names":["useEffect","useState","useRef","axios","YouTube","App","songs","setsongs","currentPlaying","setcurrentPlaying","myRef","url","method","then","response","data","items","opts","height","width","playerVars","autoplay","onPlayBtnClick","item","current","scrollIntoView","console","log","contentDetails","videoId","map","snippet","thumbnails","default","title","id"],"mappings":";;;AACA,SAAQA,SAAR,EAAmBC,QAAnB,EAA6BC,MAA7B,QAA0C,OAA1C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAO,WAAP;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACO,cAAD,EAAiBC,iBAAjB,IAAsCR,QAAQ,CAAC,IAAD,CAApD;AACA,QAAMS,KAAK,GAAGR,MAAM,CAAC,IAAD,CAApB;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACbG,IAAAA,KAAK,CAAC;AACLQ,MAAAA,GAAG,EAAE,0LADA;AAELC,MAAAA,MAAM,EAAE;AAFH,KAAD,CAAL,CAGEC,IAHF,CAGOC,QAAQ,IAAIP,QAAQ,CAACO,QAAQ,CAACC,IAAT,CAAcC,KAAf,CAH3B,EADa,CAKd;AACD,GANQ,EAMN,EANM,CAAT;AAQA,QAAMC,IAAI,GAAG;AACXC,IAAAA,MAAM,EAAE,KADG;AAEXC,IAAAA,KAAK,EAAE,MAFI;AAGXC,IAAAA,UAAU,EAAE;AACV;AACAC,MAAAA,QAAQ,EAAE;AAFA;AAHD,GAAb;;AAQA,QAAMC,cAAc,GAAIC,IAAD,IAAU;AAC/Bd,IAAAA,iBAAiB,CAACc,IAAD,CAAjB;AACAb,IAAAA,KAAK,CAACc,OAAN,CAAcC,cAAd;AACD,GAHD;;AAKAC,EAAAA,OAAO,CAACC,GAAR,CAAYrB,KAAZ;AACA,sBACE;AAAK,IAAA,SAAS,EAAI,aAAlB;AAAA,oBAAmCE,cAAc,iBACjD;AAAK,MAAA,GAAG,EAAEE,KAAV;AAAA,6BACA,QAAC,OAAD;AAAS,QAAA,OAAO,EAAEF,cAAc,CAACoB,cAAf,CAA8BC,OAAhD;AAAyD,QAAA,IAAI,EAAEZ;AAA/D;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,YADA,eAKA;AAAK,MAAA,SAAS,EAAI,gBAAlB;AAAA,gBACGX,KAAK,CAACwB,GAAN,CAAUP,IAAI,iBAAI;AAAA,+BACjB;AAAK,UAAA,SAAS,EAAI,WAAlB;AAAA,kCACE;AAAK,YAAA,GAAG,EAAG,iBAAX;AAA8B,YAAA,GAAG,EAAIA,IAAI,CAACQ,OAAL,CAAaC,UAAb,CAAwBC,OAAxB,CAAgCtB;AAArE;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAK,YAAA,SAAS,EAAI,YAAlB;AAAA,sBAAiCY,IAAI,CAACQ,OAAL,CAAaG;AAA9C;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAK,YAAA,SAAS,EAAI,sBAAlB;AAAA,mCAA0C;AAAQ,cAAA,OAAO,EAAI,MAAMZ,cAAc,CAACC,IAAD,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA1C;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AADiB,SAAaA,IAAI,CAACY,EAAlB;AAAA;AAAA;AAAA;AAAA,cAAlB;AADH;AAAA;AAAA;AAAA;AAAA,YALA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD;;GA5CQ9B,G;;KAAAA,G;AA8CT,eAAeA,GAAf","sourcesContent":["\nimport {useEffect, useState, useRef} from 'react'\nimport axios from 'axios';\nimport YouTube from 'react-youtube';\nimport './App.css';\n\nfunction App() {\n  const [songs, setsongs] = useState([]);\n  const [currentPlaying, setcurrentPlaying] = useState(null);\n  const myRef = useRef(null);\n\n  useEffect(() => {\n     axios({\n      url: 'https://www.googleapis.com/youtube/v3/playlistItems?part=snippet%2CcontentDetails&maxResults=9&playlistId=PLcjXjwgJpOzZoOYXz8y3I2PE_HspGkUry&key=AIzaSyA43Saqt5kUkQwm-BV_tWWwgA8HP5bwbXE',\n      method: 'get'\n    }).then(response => setsongs(response.data.items));\n    //console.log(songs);\n  }, []);\n\n  const opts = {\n    height: '500',\n    width: '100%',\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1,\n    },\n  };\n  const onPlayBtnClick = (item) => {\n    setcurrentPlaying(item);\n    myRef.current.scrollIntoView()\n  }\n\n  console.log(songs);\n  return (\n    <div className = {'app-wrapper'}> {currentPlaying && \n    <div ref={myRef} >\n    <YouTube videoId={currentPlaying.contentDetails.videoId} opts={opts} />\n    </div>\n    }\n    <div className = {'list-container'}>\n      {songs.map(item => <div key  = {item.id}>{\n        <div className = {'List-Item'}>\n          <img alt = 'video-thumbnail'  src = {item.snippet.thumbnails.default.url} />\n          <div className = {'list-title'}>{item.snippet.title}</div>\n          <div className = {'list-item-action-btn'}><button onClick = {() => onPlayBtnClick(item)}>Play</button></div>\n        </div>\n        }</div>)}\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}